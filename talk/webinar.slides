<!--Title-->
<div class="row justify-content-start">
    <div class="col-md-7">
        <img src="themes/imgs/header.png" class="header with-presenter"/>
        <h2 class="presenter-title">Rethinking Data Visualisation with
            <em style="color: #FDA703; font-style: normal; font-weight: bold;">&lt;PyScript&gt;</em>
        </h2>
        <h3 class="presenter-title">Valerio Maggio</h3>
        <h4 class="presenter-title">Developer Advocate at Anaconda, Inc.</h4>
        <br/>
        <h6 class="presenter-title">
            <i class="fa fa-envelope"></i>
            <code class="contacts">vmaggio@anaconda.com</code>
        </h6>
        <br/>
        <h6 class="presenter-title">
            <i class="fa fa-twitter"></i>
            <code class="contacts">@leriomaggio</code>
        </h6>
    </div>
    <div class="col-md-5">
        <img src="themes/imgs/me.png" class="header presenter"/>
    </div>
</div>

--- slide ---
<!--Who I am-->
<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Who I am</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-6">
            <img src="themes/imgs/me.png" class="presenter with-presenter"/>
        </div>
        <div class="col-md-6">
            <py-md>
                * Data Scientist and Researcher
                    - Background in Computer Science
                    - Ph.D. in Machine Learning
                * Developer Advocate in Anaconda
                * Fellow at [Software Sustainability Institute](https://www.software.ac.uk/)
                * _Python_ `&` _Community_ `&` _Open Source_
                    - PyData, EuroScipy, PyCon Italia
            </py-md>
                <ul>
                    <li>
                        Casual M:TG Wizard üßô‚Äç‚ôÇÔ∏è
                        <ul>
                            <li>
                                <i class="fa fa-twitter"></i> | <i class="fa fa-github"></i>
                                <code class="contacts">@leriomaggio</code>
                            </li>
                        </ul>
                    </li>
                </ul>

        </div>
    </div>
</div>

--- slide ---
<!--PyScript Terminal Animation-->
<div class="centered">
    <link rel="stylesheet" href="typewriter.css" />
    <h3 class="title"> Wouldn't it be cool to run Python...in the Browser ?...</h3>
    <h3>Introducing <em class="pyscript">&lt;PyScript&gt;</em></h3>

    <!-- begin terminal window -->
    <div class="terminal">
        <div class="menu">
            <div class="window-buttons close"></div>
            <div class="window-buttons minimize"></div>
            <div class="window-buttons zoom"></div>
        </div>
        <div class="screen">
            <div class="code">
                <p class="line1">&lt;html&gt;<span class="cursor1">|</span></p>
                <p class="line2">&nbsp;&nbsp;&nbsp;&nbsp;...<span class="cursor2">|</span></p>
                <p class="line3">&nbsp;&nbsp;&nbsp;&nbsp;&lt;py-script&gt;<span style="color: #aaa;"> <span style="color:#FFD580;">print</span>(<span style="color:#BAE67E;">'Now you can!'</span>) </span>&lt;/py-script&gt;<span class="cursor3">|</span></p>
                <p class="line4">&lt;/html&gt;<span class="cursor4">|</span></p>

                <p class="line5"><span class="cursor5">|</span></p>

            </div>
        </div>
    </div>
    <!-- end terminal window -->
</div>

--- slide ---
<!--Agenda-->
<div class="row justify-content-start slide-toc">
    <div class="col-md-6">
        <h2>Agenda</h2>
    </div>
    <div class="col-md-6 toc">
        <py-md>
            1.  Introduce PyScript
                -  What `[is|isNot]` PyScript
                -  How to PyScript
            2.  PyScript for Data Science
                - Main features & potentials
            3.  PyScript for Data Visualisation
                - Examples and Demo
        </py-md>
    </div>
</div>

--- slide ---
<!--Disclaimer-->
<div class="row justify-content-start">
    <div class="col-md-12">
        <h2>Disclaimer</h2>
        <div class="body">
            <span class="text-center f30">from
                <a href="https://pyscript.net" title="PyScript.net">
                    <em class="pyscript">pyscript.net</em>
                </a>
            </span>
            <py-md>
                > Please be advised that PyScript is very alpha and under heavy development.
                > There are many known issues, from usability to loading times, and you should
                expect
                > things to change **often**.

                > We encourage people to play and explore with PyScript,
                > but at this time we do not recommend using it for production.
            </py-md>
        </div>
    </div>
</div>

--- slide ---
<!--Meme-->
<div class="meme-title">
    <img src="https://media.makeameme.org/created/work-in-progress-qzqa00.jpg" alt="WIP"/>
    <h1>Expect things to change</h1>
</div>

--- slide ---
<!--Meme-->
<div class="meme-title">
    <img src="https://images.cdn.circlesix.co/image/1/700/0/uploads/posts/2016/04/31bddd8961bbb98af97c166d8ad5e604.jpg"
         alt="WIP"/>
</div>

--- slide ---
<!--Meme-->
<div class="meme-title">
    <img src="https://c.tenor.com/bsjJw92LPHYAAAAC/tony-stark-screaming.gif"
         alt="Screaming Tony Stark"/>
    <h1>Be Ready</h1>
</div>

--- slide ---
<!--What is PyScript Title-->
<div class="centered heading heading-bg heading-bg-2">
    <h1>What is <em class="pyscript">&lt;PyScript&gt;</em></h1>
</div>

--- slide ---
<!--What is PyScript-->
<div class="anim" id="anim1">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">What is <em class="pyscript">&lt;PyScript&gt;</em></h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <span class="f30 text-center italic">It's a lot of things...</span>
            <py-md>
                * Python in the browser
                    - Python **ecosystem** in the browser
                * Python **with** Javascript
                * Environment Management
                * Flexible framework:
                    - create pluggable and extensible components;
                    - UI components readily available (i.e. `buttons`, `containers`, `REPL`)
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="centered heading-bg heading-bg-2">
    <h1>Why PyScript ?</h1>
</div>

--- slide ---

<div class="centered heading-bg heading-bg-2">
    <h1>Well.... why not?</h1>
</div>

--- slide ---

<!--What is PyScript-->
<div class="anim" id="anim2">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title"><em class="pyscript">&lt;PyScript&gt;</em> at a first glance</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <span class="f30 text-center italic">In essence...</span>
            <py-md>
                * PyScript is <u>just HTML</u>...
                    - ..only a bit (ok maybe a lot) more powerful...
                - bring the whole Python ecosystem directly in the browser!
                * **Mission**: _Bring Programming for the 99%_
                * The main goal of PyScript is to completely lower the barrier of programming
                    - Making the web a _friendly_ and _hackable_ place for anyone willing to learn how to code;
                    - Minimal setup and no-installation needed
            </py-md>
        </div>
    </div>
</div>

--- slide ---
<!--Installing PyScript-->
<div class="anim" id="anim3">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Getting started with <em class="pyscript">&lt;PyScript&gt;</em></h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <span class="f30 text-center">You don't need to install anything! üòé</span>
            <p class="body">
                To use PyScript you can either
                <a href="https://github.com/pyscript/pyscript/archive/refs/heads/main.zip"
                target="_blank" title="Download PyScript on pyscript.net">
                    download</a> it and follow the instructions,
                or add the following lines to your page
            </p>
            <ul style="display:none;"><li></li></ul>
            <py-md>
                ```html
                 &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
                 &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---
<!--Versioning PyScript-->
<div class="anim" id="anim4">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">There's more: <em class="pyscript">&lt;PyScript&gt;</em> Versioning</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <span class="f32 text-center">PyScript Versioning</span>
            <br/>
            <span class="f30 text-center italic">
                from
                <a href="https://anaconda.cloud/announcing-pyscript-versioning">
                Announcing PyScript Versioning: What you should know.
                </a>
            </span>
            <py-md>
                **`latest`**:

                ```html
                 &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
                 &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
                ```
            </py-md>
            <py-md>
                **`alpha`**:

                ```html
                 &lt;link rel="stylesheet" href="https://pyscript.net/alpha/pyscript.css" /&gt;
                 &lt;script defer src="https://pyscript.net/alpha/pyscript.js"&gt;&lt;/script&gt;
                ```
            </py-md>
            <py-md>
                **`unstable`**:

                ```html
                 &lt;link rel="stylesheet" href="https://pyscript.net/unstable/pyscript.css" /&gt;
                 &lt;script defer src="https://pyscript.net/unstable/pyscript.js"&gt;&lt;/script&gt;
                ```
            </py-md>
            <py-md>
                **`pinned version`**:

                ```html
                 &lt;script defer src="https://pyscript.net/releases/2022.05.1/pyscript.js"&gt;&lt;/script&gt;
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="meme-title">
    <img src="imgs/twitter_jetbrains.png" alt="PyScript PyCharm Integration"/>
    <h1>Editor and IDE Integrations</h1>
</div>

--- slide ---
<!--Getting Started: Hello World-->
<div class="anim" id="anim5">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title" style="padding-bottom: 1rem;">How to <em class="pyscript">&lt;PyScript&gt;</em></h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <span class="f32 text-center"><em>Hello World</em> PyScript Example</span>
            <br/>
            <py-md>
                ```html
                &lt;!DOCTYPE html&gt;
                &lt;html lang="en"&gt;
                &lt;head&gt;
                    &lt;title&gt;PyScript Example&lt;/title&gt;
                    &lt;link rel="icon" type="image/png" href="favicon.png"/&gt;
                    &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css"/&gt;
                    &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                ```
            </py-md>
            <py-md>
                ```html
                &lt;body&gt;
                Hello world! &lt;br&gt;
                This is the current date and time, as computed by Python:
                &lt;py-script&gt;
                ```
                ```python
                    from datetime import datetime
                    now = datetime.now()
                    now.strftime("%m/%d/%Y, %H:%M:%S")
                ```
                ```html
                &lt;/py-script&gt;
                &lt;/body&gt;
                &lt;/html&gt;
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---
<!--Meme-->
<div class="meme-title">
    <img src="https://i.imgflip.com/6k5n9e.jpg"
         alt="PHP vibes"/>
    <h1>I have to confess...</h1>
</div>

--- slide ---
<!--Meme-->
<div class="meme-title">
    <img src="https://i.redd.it/gj1y1f3ltmj41.jpg"
         alt="PHP racism"/>
    <h1> ...and Pythonistas are typically quite opinionated about PHP</h1>
</div>

--- slide ---
<!--PhP Rule Meme-->
<div class="meme-title">
    <img src="https://preview.redd.it/oul3gz1bvwwy.jpg?auto=webp&s=2b2a479ad697bb44cca2b50cce664f262b28673f"
         alt="PHP Rulebook"/>
    <h1>The one rule in the PHP bible...</h1>
</div>

--- slide ---
<!--Are we really?-->
<div class="meme-title">
    <img src="https://i.imgflip.com/6tlt3p.jpg"
         title="Join the dark side" alt="Join the dark side meme" />
    <h1>Are we really joining the dark side?</h1>
</div>

--- slide ---
<!--Are we really?-->
<div class="meme-title">
    <img src="https://c.tenor.com/VUQaWMnKtgAAAAAd/no-let-me-think.gif"
         title="No Jim Carrey" alt="No Jim Carrey Meme" />
    <h1>There is so much more...</h1>
</div>

--- slide ---
<!--Are we really?-->
<div>
    <h1 class="title" style="padding-bottom: 1rem;">As a starter...</h1>
    <div class="body">
        <span class="f32 text-center">You can avoid mixing HTML and Python code</span>
        <py-md>
            ```python
            # timer.py
            from datetime import datetime
            now = datetime.now()
            now.strftime("%m/%d/%Y, %H:%M:%S")
            ```
        </py-md>
        <br/>
        <py-md>
            ```html
            &lt;py-script src="./timer.py"&gt;&lt;/py-script&gt;
            ```
        </py-md>
        <py-md>
            * Enables Best Practice
                * This will load and run your Python script as soon as the page is ready.
            * **Note**: Due to the **cross-origin resource sharing** (`CORS`) policy enforced
            by web browsers, you won‚Äôt be able to load a Python script from an external file.
                - It should be an _asset_ available via a web server
                - `python -m http.server`
        </py-md>
    </div>
</div>


--- slide ---
<!--Age Test JSP-->
<div class="meme-title">
    <img src="https://i.imgflip.com/6tlh8f.jpg"
         alt="JSP"/>
    <h1>Code in HTML quivering</h1>
</div>

--- slide ---
<!--JSP Example -->
<div class="anim">
    <div class="row justify-content-around">
        <div class="col-sm-12">
            <h1 class="title" style="padding-bottom: 1rem;">Java Server Pages <em>nightmares</em></h1>
        </div>
    </div>
    <div class="row justify-content-around">
        <div class="col-md-12">
            <span class="f32 text-center italic">
                source:
                <a href="https://www3.ntu.edu.sg/home/ehchua/programming/java/JSPByExample.html">
                    www3.ntu.edu.sg/home/ehchua/programming/java/JSPByExample.html
                </a>
            </span>
            <py-md>
                ```html
                &lt;html&gt;
                &lt;head&gt;&lt;title&gt;First JSP&lt;/title&gt;&lt;/head&gt;
                &lt;body&gt;
                  &lt;%
                    double num = Math.random();
                    if (num &gt; 0.95) {
                  %&gt;
                      &lt;h2&gt;You'll have a luck day!&lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;
                  &lt;%
                    } else {
                  %&gt;
                      &lt;h2&gt;Well, life goes on ... &lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;
                  &lt;%
                    }
                  %&gt;
                  &lt;a href="&lt;%= request.getRequestURI() %&gt;"&gt;&lt;h3&gt;Try Again&lt;/h3&gt;&lt;/a&gt;
                &lt;/body&gt;
                &lt;/html&gt;
                ```
            </py-md>
            <ul>
                <li><b>JSP</b>: Server-side Technology, Servlet Engine required <i class="icon-tomcat"></i>.
                </li>
                <li>
                    Main drawback of JSP (as well as PHP): Mixture of <em>Presentation</em> <b>and</b> <em>Programming logic</em>
                </li>
            </ul>
        </div>
    </div>
</div>

--- slide ---

<!--Django Template -->
<div class="anim">
    <div class="row justify-content-around">
        <div class="col-sm-12">
            <h1 class="title" style="padding-bottom: 1rem;">Templating Languages</h1>
        </div>
    </div>
    <div class="row justify-content-around">
        <div class="col-md-12">
            <span class="f32 text-center">
                Philosophy of Django Template Language
            </span>
            <br/>
            <span class="f30 text-center italic">
                source:
                <a href="https://docs.djangoproject.com/en/4.1/ref/templates/language/">
                    Django Documentation: "The Django template language"
                </a>
            </span>
            <div class="body">
            <py-md>
                > If you have a background in programming, or if you‚Äôre used to languages which
                > mix programming code directly into HTML, you‚Äôll want to bear in mind that
                > the Django template system **is not simply Python embedded into HTML**.
                >
                > This is by design: the template system is meant to express **presentation**,
                > **not program logic**.
                >
                > The Django template system provides tags which function similarly to
                > some programming constructs ‚Äì an `if` tag for boolean tests, a `for` tag for
                > looping, etc. ‚Äì but these are not simply executed as the corresponding
                > Python code, and the template system will not execute arbitrary
                > Python expressions [...].
            </py-md>
            </div>
            <ul>
                <li><b>Template Language</b>: is a new language only designed for presentation! Requires an engine to fill in the data.
                </li>
                <li>
                    <b class="pyscript">PyScript</b>: <u>Client-side Technology</u>, No server needed, no installation is required!
                    <ul>
                        <li>
                        FWIW: presentation + program logic mixture in PyScript is the same as with Javascript!
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>

--- slide ---

<!--Wrap your head-->
<div class="centered heading heading-bg heading-bg-2">
    <h1>ü§î <em class="pyscript">&lt;PyScript&gt;</em> ‚ÅâÔ∏è Javascript ü§®</h1>
</div>

--- slide ---
<!--Wrap your head-->
<div class="anim" >
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1><em class="pyscript">&lt;PyScript&gt;</em> ‚ÅâÔ∏è Javascript</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <span class="f30 text-center italic">At this point you might be wondering what exactly is PyScript..</span>
            <py-md>
                * PyScript is a **single-page application** (`SPA`)
                    - written in **TypeScript** using the **Svelte** framework;
                    - styled with `Tailwind` CSS & bundled with `rollup.js`.
                * PyScript allows to use Python (_with_ or _without_ Javascript) to build **interactive web apps**
                    - no server-side communication required, if not needed!
                    - Python meets front-end development!
                * PyScript **is not** a drop-in replacement for Javascript
                    ![JS Replacement](https://pbs.twimg.com/media/FSc3oy1XEAA9jHJ?format=jpg&name=small)
            </py-md>
        </div>
    </div>
</div>

--- slide ---



<!--<div class="centered heading-bg heading-bg-2">-->
<!--    <h1>Why <code>&lt;py-script&gt;</code> ?</h1>-->
<!--</div>-->

<!-- -&#45;&#45; slide -&#45;&#45;-->
<!--<div class="anim">-->
<!--    <div class="row justify-content-start">-->
<!--        <div class="col-sm-12">-->
<!--            <h1 class="title">Why <code>&lt;py-script&gt;</code> ?</h1>-->
<!--        </div>-->
<!--    </div>-->
<!--    <div class="row justify-content-start">-->
<!--        <div class="col-md-12">-->
<!--            <py-md>-->
<!--                * The adoption of _hyphens_ is inline with-->
<!--                [HTML Specs](https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name)-->
<!--                on valid names-->
<!--                    - This enforces the use of hyphens to avoid name conflicts between Web components, and future tags-->
<!--                * Why not just `&lt;script type="text/python"&gt;` then ?-->
<!--                * `text/python` is **not** an accepted [IAMA Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml#text)-->
<!--            </py-md>-->
<!--        </div>-->
<!--    </div>-->
<!--</div>-->

<!-- -&#45;&#45; slide -&#45;&#45;-->

<div class="centered heading-bg heading-bg-3">
    <h1 style="padding-top: 15rem;"> <em class="pyscript">PyScript</em> features </h1>
    <h2>PyScript through the lens of Data Science</h2>
</div>

--- slide ---

<!--Technical Description -->
<div class="anim" >
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title" style="padding-bottom: 1rem;">PyScript ArchitectureÔ∏è</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <img alt="PyScript Architecture Schematic" style="max-width: 45%; margin-left: 20rem;"
                 src="./themes/imgs/pyscript_arch.png" />
            <span class="text-center" style="font-size: 16px"><b>Credits:</b> @fpliger & @pwang</span>
            <py-md>
                * Therefore, Pyscript üíú JS
                    - Direct access to `DOM` and `DOM` manipulation objects;
                    - PyScript builds on top of **Pyodide** ![Pyodide Logo](https://pyodide.org/en/stable/_static/pyodide-logo.png)
                    - `pyodide`: CPython interpreter compiled with `emscripten` to **WebAssembly** (`WASM`)
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="anim">
    <div class="slide">
        <h1><code class="pyscript">Py</code><code>[script|odide]</code></h1>

        <py-md>
            ```python
            &lt;py-script&gt;
            from pyodide import fetch, open_url  # Pyodide Python API
            from pyodide import create_proxy  # wraps a PyProxy into JsProxy - Py & JS Integration!

            from js import document  # direct access to DOM and global Javascript
            [...]
            &lt;/py-script&gt;
            ```
        </py-md>
        <py-md>
            * Full(_-ish_) Python Standard Library
            * Removed modules:
                - `curses`; `dbm`; `ensurepip`; `idelelib`; `lib2to3`; `tkinter`; `turtle.py`; `turtledemo`; `venv`; `pwd`;
            * Included but not working:
                - `multiprocessing`; `threading`; `sockets`;
        </py-md>
    </div>
</div>

--- slide ---

<div class="anim">
    <div class="slide">
        <h1><code class="pyscript">Py</code><code>[script|odide]</code></h1>
        <py-md>
            ```html
            &lt;py-script&gt;
            import sys; print(f"Python {sys.version}")
            &lt;/py-script&gt;
            ```
        </py-md>
        <py-md>
            ```shell
            Python 3.10.2 (main, Apr 9 2022, 20:52:01) [Clang 14.0.0 [...]]
            ```
        </py-md>
        <py-md>
            * `Pyodide` is a spin-off project of the [`Iodide`](https://alpha.iodide.io/) project
                - kicked off by Mozilla, now discontinued;
            * Goal of Iodide was to bring **scientific computing** in the browser with NO Server communication
                - `jupyter` I am looking at you üëÄ
            * `Pyodide` provides access to full **PyData Stack** immediately available in the browser! üöÄ
                - `bokeh | networkx | numpy | scipy | scikit-learn | ...`
        </py-md>
    </div>
</div>

--- slide ---

<div class="title-only">
    <h1>Browser as a <b>Ubiquitous Virtual Machine</b></h1>
</div>

--- slide ---

<div class="anim">
    <div class="slide">
        <h1><code class="pyscript">Py</code><code>[<s>script</s>|odide]</code></h1>
        <py-md>
            ```javascript
            await pyodide.loadPackage("numpy");
            await pyodide.loadPackage(["bokeh", "scikit-learn"]);
            ```
        </py-md>
        <py-md>
            ```javascript
            await pyodide.loadPackage("https://foo/bar/numpy-1.22.3-cp310-cp310-emscripten_3_1_13_wasm32.whl");
            ```
        </py-md>
        <py-md>
            `Micropip`
            ```javascript
            await pyodide.loadPackage("micropip");
            const micropip = pyodide.pyimport("micropip");
            await micropip.install('snowballstemmer');
            pyodide.runPython(`
              import snowballstemmer
              stemmer = snowballstemmer.stemmer('english')
              print(stemmer.stemWords('go goes going gone'.split()))
            `);
            ```
        </py-md>
    </div>
</div>

--- slide ---

<div class="anim">
    <div class="slide">
        <h1><code class="pyscript">Py</code><code>[</code><code class="pyscript">script</code><code>|<s>odide</s>]</code></h1>
        <span class="text-center f35">Self-contained Environment</span>
        <py-md>
            ```html
            &lt;py-env&gt;
                - numpy
                - bokeh
                - scikit-learn
            &lt;/py-env&gt;
            ```
        </py-md>
        <py-md>
            ```html
            &lt;py-env&gt;
                - https://foo/bar/numpy-1.22.3-cp310-cp310-emscripten_3_1_13_wasm32.whl  # calls Micropip
                - bokeh
                - scikit-learn
                - paths:
                    - ./custom_module.py
            &lt;/py-env&gt;
            ```
        </py-md>
        <py-md>
            * `py-env` tag to define **self-contained** environment that are easy to manage and maintain
            * `YAML` specification (note: soon to be changed! stay tuned! üëÄ)
        </py-md>
    </div>
</div>

--- slide ---

<div class="title-only">
    <h1>Introducing <code>&lt;py-repl&gt;</code>!</h1>
</div>

--- slide ---

<div>
    <style>
        #replout {
                text-align: center;
    padding: 2rem;
    font-size: 1.5rem;
    font-family: var(--mono-font);
    text-overflow: clip;
    width: 30%;
    word-break: break-word;
        }
    </style>
    <h1>Python has a cool mantra</h1>
    <div class="row justify-content-around">
        <div class="col-md-12">
            <py-repl output="replout">import this</py-repl>
        </div>
    </div>
    <div class="row justify-content-around">
        <div class="col-md-12">
            <div id="replout"></div>
        </div>
    </div>
</div>

--- slide ---

<div>
    <h1>import antigravity</h1>
    <py-md>
        * `&lt;py-repl auto-generate="true"&gt;`
    </py-md>
    <py-repl auto-generate="true">import antigravity</py-repl>
</div>

--- slide ---

<div class="meme-title">
    <img src="https://c.tenor.com/HjA8WB2tLZoAAAAd/monty-python-holy-hand-grenade.gif"
         alt="Monty Python One Two Five"/>
    <h1>The holy hand grenade</h1>
</div>

--- slide ---

<div>
    <h1 class="title" style="padding-bottom: 1rem; padding-top: 5rem;">
        <code>py-repl</code> with <code>numpy</code> and <code>matplotlib</code></h1>
    <div class="flex mx-8">
        <div class="w-1/2 mx-1">
            <py-repl id="mlib-repl" auto-generate="true" std-out="mlib-output"
                     std-err="mlib-output">
import matplotlib.pyplot as plt
import matplotlib.tri as tri
import numpy as np

# First create the x and y coordinates of the points.
n_angles = 36
n_radii = 8
min_radius = 0.25
radii = np.linspace(min_radius, 0.95, n_radii)

angles = np.linspace(0, 2 * np.pi, n_angles, endpoint=False)
angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)
angles[:, 1::2] += np.pi / n_angles

x = (radii * np.cos(angles)).flatten()
y = (radii * np.sin(angles)).flatten()
z = (np.cos(radii) * np.cos(3 * angles)).flatten()

# Create the Triangulation; no triangles
#so Delaunay triangulation created.
triang = tri.Triangulation(x, y)

# Mask off unwanted triangles.
triang.set_mask(np.hypot(x[triang.triangles].mean(axis=1),
y[triang.triangles].mean(axis=1)).__lt__(min_radius))

fig1, ax1 = plt.subplots()
ax1.set_aspect('equal')
tpc = ax1.tripcolor(triang, z, shading='flat')
fig1.colorbar(tpc)
ax1.set_title('tripcolor of Delaunay triangulation')

fig1
            </py-repl>
        </div>
        <div id="mlib-output" class="w-1/2 mx-1"></div>
    </div>
</div>

--- slide ---

<div class="title-only">
    <h1>(Data Viz) Demo Time</h1>
    <a href="https://leriomaggio.github.io/pyscript-dataviz/examples/"
       title="PyScript Demos">Demos</a>
</div>

--- slide ---

<div>
    <div class="row justify-content-around">
        <div class="col-md-12">
            <div class="container-card">
                <div class="card">
                    <div class="card-content">
                        <h2>Matplotlib</h2>
                        <p>
                            We will be using the Wine Dataset from <code>scikit-learn</code> to
                            plot a correlation feature matrix using
                            <a href="https://matplotlib.org/"
                               target="_blank" title="Matplotlib">Matplotlib</a>
                            and <a href="https://pandas.pydata.org/" target="_blank"
                                   title="Pandas">Pandas</a>
                        </p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-content">
                        <h2>Seaborn</h2>
                        <p>
                            We will take a step further in visualising feature correlations
                            in the Wine Dataset. This time we will plot a HeatMap
                            using <a href="https://seaborn.pydata.org/"
                               target="_blank" title="Seaborn">Seaborn</a>.
                        </p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-content">
                        <h2>Bokeh</h2>
                        <p>
                            We will generate an interactive dimension reduction features in the
                            Wine dataset
                            using <code>PCA</code> and <a href="http://docs.bokeh.org/en/latest/"
                               target="_blank" title="Bokeh">Bokeh</a>.
                        </p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-content">
                        <h2>Panel &amp; HvPlot</h2>
                        <p>
                            Simple and quick full-Python interactive webapp using
                            using
                            <a href="https://panel.holoviz.org/"
                               target="_blank" title="Panel">Panel</a> and
                            <a href="https://hvplot.holoviz.org/"
                               target="_blank" title="HvPlot">HvPlot</a>.
                        </p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-content">
                        <h2>NetworkX</h2>
                        <p>
                            We will show a simple networkX example using
                            <a href="https://networkx.org/"
                               target="_blank" title="Networkx">NetworkX</a> and
                            <code>&lt;py-script&gt;</code>
                        </p>
                    </div>
                </div>
                <div class="card">
                    <div class="card-content">
                        <h2>NetworkX and D3.js</h2>
                        <p>
                            We will take a step further, and we will see an
                            example demonstrating the integration of
                            <a href="https://networkx.org/"
                               target="_blank" title="Networkx">NetworkX</a> with
                            <code>d3.js</code> via
                            <code>&lt;py-script&gt;</code>
                        </p>
                    </div>
                </div>
                <div class="card">
                    <div class="card-content">
                        <h2>Star Wars Social Network w/ D3.js</h2>
                        <p>
                            We will have fun creating a full-Python based
                            <code>d3.js</code> webapp.
                            How cool it would be if we could..<code>import d3</code>?
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

--- slide ---

<div class="demo">
    <iframe src="../examples/matplotlib.html" title="Feature Correlation with Matplotlib"></iframe>
</div>

 --- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Matplotlib: A look at the code</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```html
                &lt;py-env&gt;
                    - matplotlib
                    - scikit-learn
                &lt;/py-env&gt;
                ```
            </py-md>
            <py-md>
                **`Python`**:
                ```python
                import matplotlib.pyplot as plt

                from sklearn.datasets import load_wine
                from pandas.plotting import scatter_matrix

                features, _ = load_wine(as_frame=True, return_X_y=True)

                fig, ax = plt.subplots(figsize=(16, 12))
                ax.set_aspect('equal')
                _ = scatter_matrix(features, ax=ax)

                # really interesting bit here!
                Element("mpl").write(fig)  # PyScript DOM API
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="demo">
    <iframe src="../examples/seaborn.html" title="Feature Correlation Heatmap with Seaborn"></iframe>
</div>

 --- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Seaborn: A look at the code</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```html
                &lt;py-env&gt;
                    - matplotlib
                    - seaborn
                    - scikit-learn
                &lt;/py-env&gt;
                ```
            </py-md>
            <py-md>
                **`Python`**:
                ```python
                import matplotlib.pyplot as plt
                from sklearn.datasets import load_wine
                import seaborn as sns

                features, _ = load_wine(as_frame=True, return_X_y=True)

                fig, ax = plt.subplots(figsize=(14, 12))
                ax.set_aspect('equal')

                # seaborn code
                cmap = sns.diverging_palette(10, 220, as_cmap=True)
                corr = features.corr()
                sns.heatmap(corr, vmin=-1.0, vmax=1.0, square=True, cmap=cmap, cbar=True, ax=ax)

                Element("seaborn").write(fig)  # PyScript DOM API
                ```
            </py-md>
        </div>
    </div>
</div>


--- slide ---

<div class="demo">
    <iframe src="../examples/bokeh.html" title="Interactive Dimension Reduction with Bokeh"></iframe>
</div>

 --- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Bokeh: A look at the code 1/2</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```html
                &lt;py-env&gt;
                    - bokeh
                    - pandas
                    - scikit-learn
                &lt;/py-env&gt;
                ```
            </py-md>
            <py-md>
                ```html
                &lt;script type="text/javascript" src="https://cdn.bokeh.org/bokeh/release/bokeh-2.4.2.min.js"&gt;
                &lt;script type="text/javascript" src="https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.4.2.min.js"&gt;
                &lt;script type="text/javascript" src="https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.4.2.min.js"&gt;
                &lt;script type="text/javascript" src="https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.4.2.min.js"&gt;
                &lt;script type="text/javascript" src="https://cdn.bokeh.org/bokeh/release/bokeh-mathjax-2.4.2.min.js"&gt;
                &lt;script type="text/javascript"&gt;
                    Bokeh.set_log_level("info");
                &lt;/script&gt;
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Bokeh: A look at the code 2/2</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                **`Python`**:
                ```python
                import json
                from js import Bokeh, JSON
                from bokeh.embed import json_item

                from bokeh.plotting import figure
                ```
            </py-md>
            <py-md>
                ```python
                p = figure(plot_width=1024, plot_height=768,
                            x_axis_label="First Principal Component",
                            y_axis_label="Second Principal Component",
                            title="...")

                [...]  # create p.scatter(...)
                p_json = json.dumps(json_item(p, "bokeh"))
                Bokeh.embed.embed_item(JSON.parse(p_json))
                ```
            </py-md>
        </div>
    </div>
</div>

 --- slide ---

<div class="demo">
    <iframe src="../examples/panel_hvplot.html" title="Interactive Dimension Reduction with Panel and HvPlot"></iframe>
</div>

--- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Panel-HvPlot: A look at the code</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```html
                &lt;py-env&gt;
                    - panel
                    - matplotlib
                    - hvplot
                    - bokeh
                &lt;/py-env&gt;

                &lt;script src="https://unpkg.com/@holoviz/panel@0.13.1/dist/panel.min.js" type="text/javascript"&gt;
                ```
            </py-md>
            <py-md>
                **`Python`**:
                ```python
                EXTENSIONS = ["matplotlib", "bokeh"]
                hvplot.extension('matplotlib', 'bokeh')
                select_extension = pn.widgets.Select(options=EXTENSIONS, name="HvPlot Extensions")
                ```
            </py-md>
            <py-md>
                ```python
                @pn.depends(select_extension)
                def choose_extension(select_extension):
                    hvplot.output(backend=select_extension)
                    return df.hvplot.scatter(x='X0', y='X1', by='Class')

                pn.Column(select_extension, choose_extension).servable(target="panel");
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="demo">
    <iframe src="../examples/networkx.html" title="NetworkX and Matplotlib"></iframe>
</div>

 --- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">NetworkX: A look at the code</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```html
                &lt;py-env&gt;
                    - networkx
                    - matplotlib
                &lt;/py-env&gt;
                ```
            </py-md>
            <py-md>
                 **`Python`**:
                ```python
                import networkx as nx
                import matplotlib.pyplot as plt

                fig, ax = plt.subplots()
                G = nx.complete_graph(10)
                nx.draw(G, ax=ax)

                Element("networkx").write(fig)  # PyScript DOM API
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="demo">
    <iframe src="../examples/networkx_d3.html" title="NetworkX and D3.js"></iframe>
</div>

 --- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">NetworkX and D3.js: A look at the code 1/2</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```html
                &lt;py-env&gt;
                    - networkx
                    - matplotlib
                &lt;/py-env&gt;
                &lt;script type="importmap"&gt;
                    {
                      "imports": {
                        "d3": "https://cdn.skypack.dev/d3@7"
                      }
                    }
                &lt;/script&gt;
                ```
            </py-md>
            <py-md>
                ```html
                &lt;py-config&gt;
                  autoclose_loader: false
                  runtimes:
                    - src: "https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js"
                      name: pyodide-0.21.3
                      lang: python
                &lt;/py-config&gt;
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">NetworkX and D3.js: A look at the code 2/2</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```python
                import d3
                import js
                from pyodide.ffi import create_proxy, to_js
                ```
            </py-md>
            <py-md>
                ```python
                G = nx.complete_graph(10)
                node_list = [{"id": node[0], "name": node[1]} for node in G.nodes(data=True)]
                edge_list = [{"source": edge[0], "target": edge[1]} for edge in nx.to_edgelist(G)]
                nodes, edges = to_js(node_list), to_js(edge_list, dict_converter=js.Object.fromEntries)
                ```
            </py-md>
            <py-md>
                ```python
                @create_proxy
                def ticked():
                    (link.attr("x1", lambda d, *_: d.source.x)
                         .attr("y1", lambda d, *_: d.source.y)
                         .attr("x2", lambda d, *_: d.target.x)
                         .attr("y2", lambda d, *_: d.target.y))
                    [...]
                simulation = (d3.forceSimulation(nodes)
                              .force("link", d3.forceLink().id(id_fn).links(edges))
                              .force("charge", d3.forceManyBody().strength(-1500))
                              .on("tick", ticked))
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="demo">
    <iframe src="../examples/starwars_pyscript.html" title="Star Wars Social Network"></iframe>
</div>

 --- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Star Wars Social Network: A look at the code 1/2</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```python
                import d3
                import js

                from dataclasses import dataclass
                from collections import namedtuple
                from math import sqrt

                from js import document
                from pyodide.ffi import create_proxy, to_js
                from pyodide.http import pyfetch
                ```
            </py-md>
            <py-md>
                ```python
                async def fetch_data(data_url):
                    response = await pyfetch(url=data_url, method="GET")
                    graph_data = await response.json()
                    [...]  # data encapsulation in Data Classes

                    characters = to_js(characters, dict_converter=js.Array.new)
                    interactions = to_js(interactions, dict_converter=js.Map.new)

                    graph = Graph(nodes=characters, links=interactions)
                    return graph
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="anim">
    <div class="row justify-content-start">
        <div class="col-sm-12">
            <h1 class="title">Star Wars Social Network: A look at the code 2/2</h1>
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col-md-12">
            <py-md>
                ```python
                graph = await fetch_data(data_url)

                simulation = (d3.forceSimulation(graph.nodes)
                              .force("link", d3.forceLink().id(create_proxy(lambda d, *_: d.id))
                                     .links(graph.links)))
                node, link, text = setup_svg_graph(graph, svg,
                                                   drag_fn=(drag_started, dragged, drag_ended))
                simulation.on("tick", ticked)  # pass in JsProxy objects
                ```
            </py-md>
            <py-md>
                ```python
                @create_proxy
                async def on_change(*args, **kwargs):
                    episode = js.document.getElementById("episodes").value
                    await starwars_interactions_d3(episode)

                document.getElementById("episodes").addEventListener("change", on_change);
                starwars_interactions_d3(1)
                ```
            </py-md>
        </div>
    </div>
</div>

--- slide ---

<div class="centered">
    <h1>Demo of all Demos (this slideshow :) )</h1>
    <h2>Please have a look at the <i class="fa fa-github"></i>
        repo:
        <a href="http://github.com/leriomaggio/pyscript-dataviz">github.com/leriomaggio/pyscript-dataviz</a>
    </h2>
</div>

--- slide ---

<div class="centered slide-bg agenda">
    <h1 style="padding-bottom: 1rem;">THANK YOU</h1>
    <h3>Valerio Maggio, Developer Advocate at Anaconda, Inc.</h3>
    <h4><i class="fa fa-twitter"></i> | <i class="fa fa-github"></i>
            <code class="contacts">@leriomaggio</code></h4>
    <p class="body">
        Thanks to Fabio Pliger, Philipp Rudiger, Guillaume Lemaitre, All of you
    </p>
</div>
